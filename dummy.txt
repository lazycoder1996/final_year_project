  void simpleComputation() {
    extractHeaders(dataFile);
    // defining variables
    List backSight = [];
    List controls = [];
    List interSight = [];
    List foreSight = [];
    List remarks = [];
    List chainages = [];
    int k;
    List<num> initialReducedLevels = [];
    int size;
    List<num> heightDifferences = [0];
    List adj = [0];
    var numberOfnonZeroBacksight;
    var error;
    List newBackSight = [];
    String arithmeticCheck;
    num allowableMisclose;
    String condition;
    String misclose;
    List<num> finalReducedLevels = [];
    num nonZeroBs = 0;
    num sumOfBs = 0;
    num sumOfRise = 0;
    num sumOfFall = 0;
    num sumOfFs = 0;
    num sumOfHeights = 0;
    num diffBtnBsAndFs;
    num diffFirstRlAndLastRl;
    List rise = [''];
    List fall = [''];
    List heightCollimation;
    List<List<dynamic>> errorData = [];
    bool mySwitch = false;
    bool computeSwitch = true;
    bool chainagesExist;
    bool statsPressed;
    // static File myCsvFile = new File(_fileName);
    List<List<dynamic>> data = [];
    num max = 0;
    num absMax;
    num absMin;
    num min;
    num a;
    num b;
    int timesDownloaded = 0;
    List fileNames = [];
    dynamic initialBmValue;
    dynamic finalBmValue;
    // putting appropriate data in columns
    for (int i = 1; i < levelData.length; i++) {
      backSight.add(levelData[i][headers.indexOf(backsightDropDownValue)]);
      interSight.add(levelData[i][headers.indexOf(intersightDropDownValue)]);
      foreSight.add(levelData[i][headers.indexOf(foresightDropDownValue)]);
      controls.add(levelData[i][headers.indexOf(benchmarkValue)]);
    }
    // getting initial bench mark
    try {
      print(controls.first);
      initialBmValue = controls.first;
      initialReducedLevels.add(num.parse(initialBmValue.toString()));
    } catch (e) {
      initialBmValue = '';
    }
    size = backSight.length;
    num h;
    int n = 0;
    num reducedLevel;
    // Calculating rise or fall
    if (initMethod == "Rise or Fall") {
      selectedComputation = 'Rise and Fall';
      try {
        while (n <= size) {
          if (backSight[n] != '') {
            if (interSight[n + 1] != '') {
              h = backSight[n] - interSight[n + 1];
              heightDifferences.add(h);
            } else {
              h = backSight[n] - foreSight[n + 1];
              heightDifferences.add(h);
            }
          } else {
            if (interSight[n + 1] != '') {
              h = interSight[n] - interSight[n + 1];
              heightDifferences.add(h);
            } else {
              h = interSight[n] - foreSight[n + 1];
              heightDifferences.add(h);
            }
          }
          n++;
        }
      } catch (e) {
        print(heightDifferences);
        // print(e.toString());
      }
      // Calculating initial reduced levels
      n = 0;
      try {
        while (n <= size) {
          reducedLevel = initialReducedLevels[n] + heightDifferences[n + 1];
          initialReducedLevels
              .add(double.parse(reducedLevel.toStringAsFixed(3)));
          n++;
        }
      } catch (e) {
        // print(e.toString());
      }
      print(initialReducedLevels);
    } else {
      selectedComputation = 'Height of plane of collimation';

      // Calculating for hpc
      try {
        num hpc;
        heightCollimation = [
          backSight[0] + double.parse(initialBmValue.toString())
        ];
        initialReducedLevels = [double.parse(initialBmValue.toString())];
        n = 0;
        while (n <= size) {
          if (interSight[n + 1] != '') {
            reducedLevel = heightCollimation[n] - interSight[n + 1];
            initialReducedLevels
                .add(double.parse(reducedLevel.toStringAsFixed(3)));
            if (backSight[n + 1] != '' && foreSight[n + 1] != '') {
              hpc = initialReducedLevels[n + 1] + backSight[n + 1];
              heightCollimation.add(double.parse(hpc.toStringAsFixed(3)));
            } else {
              hpc = heightCollimation[n];
              heightCollimation.add(double.parse(hpc.toStringAsFixed(3)));
            }
          } else {
            if (foreSight[n + 1] != '') {
              reducedLevel = heightCollimation[n] - foreSight[n + 1];
              initialReducedLevels
                  .add(double.parse(reducedLevel.toStringAsFixed(3)));
              if (backSight[n + 1] != '' && foreSight[n + 1] != '') {
                hpc = initialReducedLevels[n + 1] + backSight[n + 1];
                heightCollimation.add(double.parse(hpc.toStringAsFixed(3)));
              } else {
                hpc = heightCollimation[n];
                heightCollimation.add(double.parse(hpc.toStringAsFixed(3)));
              }
            }
          }
          n++;
        }
      } catch (e) {
        print(e.toString());
      }
    }
    newBackSight = backSight;
    try {
      n = 0;
      while (n <= size) {
        if (backSight[n] != '') {
          nonZeroBs++;
        }
        n++;
      }
    } catch (e) {}
    // calculating errors
    if (num.tryParse(controls.last.toString()) != null) {
      // nonZeroBs = 0;
      try {
        n = 0;
        error = double.parse(((initialReducedLevels.last) -
                (num.parse(controls.last.toString())))
            .toStringAsFixed(3));
        print('error is $error');
        // Counting non-null values in backsight
      } catch (e) {}

      //Custom function to count non null backsights at a specified length
      num countNonZero(num n) {
        int z = 0;
        int nonZeroBackSightSpecified = 0;
        List subBackSight = [];
        subBackSight = newBackSight.sublist(0, n + 1);
        try {
          while (z <= size) {
            if (subBackSight[z] != '') {
              nonZeroBackSightSpecified++;
            }
            z++;
          }
        } catch (e) {}
        return nonZeroBackSightSpecified;
      }

      try {
        num m;
        n = 0;
        while (n <= size) {
          if (error != 0 && initialReducedLevels[n + 1] != 0) {
            m = (-error / nonZeroBs) * countNonZero(n);
            adj.add(double.parse(m.toStringAsFixed(3)));
          } else {
            m = 0;
            adj.add(double.parse(m.toStringAsFixed(3)));
          }
          n++;
        }
      } catch (e) {}
    }

    // // Calculating for final reduced levels if final Bm value is not null
    if (num.tryParse(controls.last.toString()) != null) {
      num frl;
      n = 0;
      try {
        while (n <= size) {
          frl = adj[n] + initialReducedLevels[n];
          finalReducedLevels.add(double.parse(frl.toStringAsFixed(3)));
          n++;
        }
      } catch (e) {
        print(e.toString());
      }
      print('frl is $finalReducedLevels');
    }
    // Arithmetic check
    try {
      // removing empty strings in foresights and backsights
      List newBacksight = [];
      n = 0;
      try {
        while (n <= size) {
          if (backSight[n] != '') {
            newBacksight.add(newBacksight[n]);
          }
          n++;
        }
      } catch (e) {}

      // Summing backsights
      try {
        int x;
        x = 0;
        while (x <= size) {
          if (newBackSight[x] != '') {
            sumOfBs = sumOfBs + newBackSight[x];
          }
          x++;
        }
      } catch (e) {} finally {
        print('sum of BS: $sumOfBs');
      }

      //Summing foresights
      try {
        int a = 0;
        while (a <= size) {
          if (foreSight[a] != '') {
            sumOfFs = sumOfFs + foreSight[a];
          }
          a++;
        }
      } catch (e) {} finally {
        print('sum of FS: $sumOfFs');
      }

      //summing rises and falls
      if (initMethod == "Rise or Fall") {
        try {
          int b = 0;
          while (b <= size) {
            sumOfHeights = heightDifferences[b] + sumOfHeights;
            b++;
          }
        } catch (e) {} finally {
          print('sum of Rises: $sumOfHeights');
        }
      }

      sumOfFs = double.parse(sumOfFs.toStringAsFixed(3));
      diffBtnBsAndFs = sumOfBs - sumOfFs;
      diffFirstRlAndLastRl =
          initialReducedLevels.last - initialReducedLevels[0];
      if ((double.parse(diffBtnBsAndFs.toStringAsFixed(3)) ==
              double.parse(sumOfHeights.toStringAsFixed(3))) ||
          (double.parse(diffBtnBsAndFs.toStringAsFixed(3))) ==
              double.parse(diffFirstRlAndLastRl.toStringAsFixed(3))) {
        arithmeticCheck = 'correct';
      } else {
        arithmeticCheck = 'incorrect, please check your data';
      }
      print('arithmetic check : $arithmeticCheck');
      // Allowable
      try {
        k = int.parse(initAccuracy);
        allowableMisclose =
            double.parse((k * math.sqrt(nonZeroBs)).toStringAsFixed(3));
        if (num.tryParse(controls.last.toString()) != null) {
          if (error.abs() <= allowableMisclose) {
            condition = '';
            misclose = 'accepted';
          } else {
            condition = 'not ';
            misclose = 'rejected';
          }
        }
      } catch (e) {
        print(e.toString());
      }
      print('misclose is $misclose');
    } catch (e) {
      print(e.toString());
    }

    //Seperating rises and falls
    try {
      List<num> newHeights = heightDifferences.sublist(1);
      var i;
      for (i in newHeights) {
        if (i >= 0) {
          rise.add(double.parse(i.toStringAsFixed(3)));
          fall.add('');
        } else {
          fall.add(double.parse(i.abs().toStringAsFixed(3)));
          rise.add('');
        }
      }
    } catch (e) {}
    print('rise data: $rise');
    print('fall data: $fall');

    // Removing duplicates in HPC
    try {
      n = 1;
      int x = 0;
      while (n <= size) {
        if (heightCollimation[x] == heightCollimation[n]) {
          heightCollimation[n] = '';
        } else {
          x = n;
        }
        n++;
      }
    } catch (e) {}

    //Summing rises and falls
    try {
      n = 0;
      while (n <= size) {
        if (rise[n] != '') {
          sumOfRise += rise[n];
        }
        if (fall[n] != '') {
          sumOfFall += fall[n];
        }
        n++;
      }
    } catch (e) {}

    int m = 0;

    if (initMethod == "Rise or Fall") {
      m = 2;
    } else {
      m = 1;
    }
    // Adding results to myData
    try {
      n = 0;
      while (n < size) {
        // Adding adjustment and final reduced levels to table
        if (num.tryParse(controls.last.toString()) != null) {
          // Adding rise and fall columns to table
          if (initMethod == "Rise or Fall") {
            levelData[n + 1].insert(m + 1, rise[n]);
            levelData[n + 1].insert(m + 2, fall[n]);
          }
          // Adding HPC to table
          else {
            levelData[n + 1].insert(m + 2, heightCollimation[n]);
          }
          levelData[n + 1].insert(m + 3, initialReducedLevels[n]);
          levelData[n + 1].insert(m + 4, adj[n]);
          levelData[n + 1].insert(m + 5, finalReducedLevels[n]);
        }
        // Not adding adjustment and final reduced levels to table
        else {
          // Adding rise and fall columns to table
          if (initMethod == "Rise or Fall") {
            levelData[n + 1].insert(3, rise[n]);
            levelData[n + 1].insert(4, fall[n]);
          }
          // Adding HPC to table
          else {
            levelData[n + 1].insert(3, heightCollimation[n]);
          }
          levelData[n + 1].insert(m + 3, initialReducedLevels[n]);
        }
        n++;
      }
    } catch (e) {}

    //Appending necessary data to error Data
    errorData.add(['The selected accuracy (k)']);
    errorData[0].add(' $k');
    // errorData.add([' The selected method of computation']);
    // errorData[1].add(' $selectedComputation');
    errorData.add([' No. of stations']);
    errorData[1].add(' $nonZeroBs');
    errorData.add([' Sum of backsights']);
    errorData[2].add(' $sumOfBs');
    errorData.add([' Sum of foresights']);
    errorData[3].add(' $sumOfFs');
    errorData.add([' ΣBS - ΣFS']);
    errorData[4].add(' ' + diffBtnBsAndFs.toStringAsFixed(3));

    n = 4;
    // Rise and fall checks
    if (initMethod == "Rise or Fall") {
      errorData.add([' Sum of rise']);
      errorData[n + 1].add(' ' + sumOfRise.toStringAsFixed(3));
      errorData.add([' Sum of fall']);
      errorData[n + 2].add(' ' + sumOfFall.toStringAsFixed(3));
      errorData.add([' Σ Rise - Σ Fall']);
      errorData[n + 3].add(' ' + sumOfHeights.toStringAsFixed(3));
      errorData.add([' Arithmetic check']);
      errorData[n + 4].add(' $arithmeticCheck');
      if (num.tryParse(controls.last.toString()) != null) {
        errorData.add([' The allowable misclose']);
        errorData[n + 5].add(' $allowableMisclose');
        errorData.add([' The misclose calculated']);
        errorData[n + 6].add('is $error');
      }
    }
    // HPC checks
    else {
      errorData.add([' Arithmetic check']);
      errorData[n + 1].add(' $arithmeticCheck');
      if (num.tryParse(controls.last.toString()) != null) {
        errorData.add([' The allowable misclose']);
        errorData[n + 2].add(' $allowableMisclose');
        errorData.add([' The misclose calculated']);
        errorData[n + 3].add(' $error');
      }
    }

    dataHeadings = [];
    dataHeadings.add("Backsight");
    dataHeadings.add("Intersight");
    dataHeadings.add("Foresight");

    if (num.tryParse(controls.last.toString()) != null) {
      if (initMethod == "Rise or Fall") {
        dataHeadings.add("Rise");
        dataHeadings.add("Fall");
        dataHeadings.add("Initial Reduced Level");
        dataHeadings.add("Adjustment");
        dataHeadings.add("Final Reduced Level");
        dataHeadings.add("Remarks");
      } else {
        dataHeadings.add("Height of plane of collimation");
        dataHeadings.add("Initial Reduced Level");
        dataHeadings.add("Adjustment");
        dataHeadings.add("Final Reduced Level");
        dataHeadings.add("Remarks");
      }
    } else {
      if (initMethod == "Rise or Fall") {
        dataHeadings.add("Rise");
        dataHeadings.add("Fall");
        dataHeadings.add("Initial Reduced Level");
        dataHeadings.add("Remarks");
      } else {
        dataHeadings.add("Height of plane of collimation");
        dataHeadings.add("Initial Reduced Level");
        dataHeadings.add("Remarks");
      }
    }
    setState(() {
      computationsDone = true;
    });
    print('data heading is $dataHeadings');
    levelData[0] = dataHeadings;
    dataHeadings.add('Controls');
    print('final data is $levelData');
  }


    void preciseComputation() {
    // Extracting data
    int upperReading = headers.indexOf(upperStadiaValue);
    int middleReading = headers.indexOf(middleStadiaValue);
    int lowerReading = headers.indexOf(lowerStadiaValue);
    int digitalReading = headers.indexOf(digitalReadingValue);
    int controls = headers.indexOf(benchmarkValue);
    // Computing X
    levelData[0].insert(5, 'X');
    for (var i in levelData.sublist(1)) {
      i.insert(
          5,
          ((double.parse(i[upperReading].toString()) +
                      double.parse(i[lowerReading].toString())) /
                  2)
              .toStringAsFixed(3));
    }
    // 'bs,fs,u,m,l,x,d'
    // Computing C values
    levelData[0].add('C');
    for (var i in levelData.sublist(1)) {
      i.add(((double.parse(i[middleReading].toString()) +
                  double.parse(i[5].toString()) +
                  double.parse(i[digitalReading + 1].toString())) /
              3)
          .toStringAsFixed(3));
    }

    // Computing rise and fall
    levelData[0].add('Rise or Fall');
    try {
      for (int i = 1; i <= levelData.length; i = i + 2) {
        var rise = double.parse(levelData[i].last) -
            double.parse(levelData[i + 1].last);
        levelData[i + 1].add(rise.toStringAsFixed(3));
        levelData[i].add("");
      }
    } catch (d) {}

    double reducedLevel;
    levelData[1].add(double.parse(levelData[1][controls]));
    levelData[0].add('Reduced Level');
    try {
      for (int a = 2; a <= levelData.length; a = a + 2) {
        if (a == 2) {
          levelData[a + 1].add("");
          reducedLevel = double.parse(levelData[a - 1][9].toString()) +
              double.parse(levelData[a][8].toString());
          levelData[a].add(reducedLevel.toStringAsFixed(3));
        }
        if (a % 2 == 0 && a != 2) {
          if (a != levelData.length - 1) levelData[a + 1].add("");
          reducedLevel = double.parse(levelData[a - 2][9].toString()) +
              double.parse(levelData[a][8].toString());
          levelData[a].add(reducedLevel.toStringAsFixed(3));
        }
      }
    } catch (e) {}
    setState(() {
      dataHeadings = levelData[0];
      computationsDone = true;
    });
  }